"""
Django settings for otomamay_app project.

Generated by 'django-admin startproject' using Django 4.2.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

# Django
import os
from pathlib import Path
from datetime import timedelta
# Local imports
from .logging_handlers import DailyRotatingFileHandler
# Third-party
from decouple import config

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('DJANGO_SECRET_KEY')
NEXT_JS_HOST = config('NEXT_JS_HOST', default='http://localhost')
NEXT_JS_PORT = config('NEXT_JS_PORT', default='3000')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', default=False, cast=bool)
# SpeechBrainの設定を最適化
SPEECHBRAIN_DEV_MODE = True  # 開発モードを有効化
SPEECHBRAIN_DISABLE_QUIRKS = True  # 不要な機能を無効化

# Celery設定
CELERY_BROKER_URL = config('CELERY_BROKER_URL', default='redis://localhost:6379/0')
CELERY_RESULT_BACKEND = config('CELERY_RESULT_BACKEND', default='redis://localhost:6379/0')
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'Asia/Tokyo'

allowed_hosts = config('ALLOWED_HOSTS', default='*')
ALLOWED_HOSTS = [h.strip() for h in allowed_hosts.split(',')]

# CORS設定
CORS_ALLOWED_ORIGINS = [
    "https://voice-picker-ai.com",  # 本番フロント
    "https://django.voice-picker-ai.com",
]

if DEBUG:
    CORS_ALLOWED_ORIGINS += [
        "http://localhost:3000",    # 開発時
        "http://127.0.0.1:3000",    # 開発時
        "http://localhost:3001",    # 開発時（ポート変更）
        "http://127.0.0.1:3001",    # 開発時（ポート変更）
    ]
    # 開発時の全許可設定
    CORS_ALLOW_ALL_ORIGINS = True
    CORS_ALLOW_CREDENTIALS = True

CORS_ALLOW_CREDENTIALS = True

CORS_ALLOW_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]

CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
]

CORS_EXPOSE_HEADERS = ['Content-Type', 'Authorization']
CORS_PREFLIGHT_MAX_AGE = 86400  # 24時間

# CSRF設定
CSRF_TRUSTED_ORIGINS = [
    "https://voice-picker-ai.com",
    "https://django.voice-picker-ai.com",
]

if DEBUG:
    CSRF_TRUSTED_ORIGINS += [
        "http://localhost:3000",
        "http://127.0.0.1:3000",
    ]

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin', # 管理画面
    'django.contrib.auth', # 認証
    'django.contrib.contenttypes', # コンテンツタイプ
    'django.contrib.sessions', # セッション
    'django.contrib.messages', # メッセージ
    'django.contrib.staticfiles', # 静的ファイル

    # 3rd party
    'sass_processor', # SASSプロセッサ
    'tailwind', # Tailwind CSS
    'theme', # Tailwind CSS
    'django_browser_reload', # 開発用ブラウザ自動更新
    'django.contrib.sites', # サイト設定
    'corsheaders',
    'drf_spectacular', # Swagger
    'rest_framework', # REST API
    'rest_framework_simplejwt', # JWTトークン
    # 'djoser', # 認証

    # my apps
    'member_management.apps.MemberManagementConfig', # 会員管理
    'voice_picker.apps.VoicePickerConfig', # 音声文字起こし
    'ab_test.apps.AbTestConfig', # A/Bテスト
    'analytics.apps.AnalyticsConfig', # LP分析
]

AUTH_USER_MODEL = 'member_management.User'  # 'member_management'はカスタムユーザーモデルを定義したアプリ名
# Configure the JWT settings
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=120),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
}

SITE_ID = 1  # 作成したサイトのID

TAILWIND_APP_NAME = "theme"

if DEBUG:
    INTERNAL_IPS = [
        "127.0.0.1",
    ]

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
}

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django_browser_reload.middleware.BrowserReloadMiddleware', # 開発用ブラウザ自動更新
    'member_management.middleware.StripeSecurityMiddleware', # Stripeセキュリティ
    'member_management.middleware.SubscriptionAccessMiddleware', # サブスクリプションアクセス制御
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
            'debug': DEBUG,
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': config('DATABASE_NAME'),
        'USER': config('DATABASE_USER'),
        'PASSWORD': config('DATABASE_PASSWORD'),
        'HOST': config('DATABASE_HOST'),
        'PORT': config('DATABASE_PORT'),
    }
}

# Docker settings
DOCKER_ENV = config('DOCKER_ENV', default=False, cast=bool)
DOCKER_SERVICE_NAME = config('DOCKER_SERVICE_NAME', default='django')

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

INTERNAL_IPS = [
    '127.0.0.1',
]

LANGUAGE_CODE = 'ja'

TIME_ZONE = 'Asia/Tokyo'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

# 静的ファイルの設定
STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
]

STATICFILES_FINDERS = [
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
    'sass_processor.finders.CssFinder',
]

# SASSプロセッサの設定
SASS_PROCESSOR_ENABLED = True
SASS_PROCESSOR_ROOT = os.path.join(BASE_DIR, 'static')
SASS_PROCESSOR_INCLUDE_DIRS = [
    os.path.join(SASS_PROCESSOR_ROOT, 'scss'),
]
SASS_PROCESSOR_AUTO_INCLUDE = True

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# WhiteNoise設定
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'
# 開発環境では短いキャッシュ、本番環境では長いキャッシュ
WHITENOISE_MAX_AGE = 60 if DEBUG else 31536000  # 開発:1分、本番:1年
WHITENOISE_SKIP_COMPRESS_EXTENSIONS = ['jpg', 'jpeg', 'png', 'gif', 'webp', 'zip', 'gz', 'tgz', 'bz2', 'tbz', 'xz', 'br']

# メール設定-----------------------------------------------------------------------------------------------
EMAIL_BACKEND = config('EMAIL_BACKEND', default='django.core.mail.backends.console.EmailBackend')
EMAIL_HOST = config('EMAIL_HOST', default='localhost')
EMAIL_PORT = config('EMAIL_PORT', default=2525)
EMAIL_HOST_USER = config('EMAIL_HOST_USER', default='debug@debug.com')
EMAIL_HOST_FROM = config('EMAIL_HOST_FROM', default='debug@debug.com')
EMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD', default='')
EMAIL_USE_TLS = config('EMAIL_USE_TLS', default=False, cast=bool)
EMAIL_USE_SSL = config('EMAIL_USE_SSL', default=False, cast=bool)

# 管理者通知メール設定（カンマ区切りで複数指定可能）
admin_emails = config('ADMIN_NOTIFICATION_EMAILS', default='admin@voice-picker-ai.com')
ADMIN_NOTIFICATION_EMAILS = [email.strip() for email in admin_emails.split(',') if email.strip()]

# voice-pickerファイルアップロード設定-----------------------------------------------------------------------
MEDIA_URL = ''
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Zoom会議録画設定-----------------------------------------------------------------------
ZOOM_CLIENT_ID = config('ZOOM_CLIENT_ID', default='')
ZOOM_CLIENT_SECRET = config('ZOOM_CLIENT_SECRET', default='')
ZOOM_MEETING_SDK_KEY = config('ZOOM_MEETING_SDK_KEY', default='')
ZOOM_MEETING_SDK_SECRET = config('ZOOM_MEETING_SDK_SECRET', default='')
ZOOM_REDIRECT_URI = config('ZOOM_REDIRECT_URI', default='http://localhost:4000/auth/callback')
ZOOM_BOT_SERVER_URL = config('ZOOM_BOT_SERVER_URL', default='http://zoom_bot_server:4000')
ZOOM_RECORDINGS_PATH = config('ZOOM_RECORDINGS_PATH', default=os.path.join(MEDIA_ROOT, 'zoom_recordings'))
# ログ設定------------------------------------------------------------------------------------------------
# プロジェクトのベースディレクトリを設定
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# logsディレクトリのパスを設定
LOGS_DIR = os.path.join(BASE_DIR, 'logs')

# logsディレクトリが存在しない場合は作成
if not os.path.exists(LOGS_DIR):
    os.makedirs(LOGS_DIR)

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '%(asctime)s %(levelname)s [%(name)s] [%(filename)s:%(lineno)d] - %(message)s',
            'datefmt': '%Y-%m-%d %H:%M:%S',
        },
    },
    'handlers': {
        'django_file': {
            'level': 'INFO',
            'class': 'config.logging_handlers.DailyRotatingFileHandler',
            'filename': os.path.join(LOGS_DIR, 'django'),
            'formatter': 'verbose',
            'when': 'midnight', # 毎日真夜中にローテーション
            'backupCount': 30,  # 30日分のバックアップを保持
        },
        'api_file': {
            'level': 'DEBUG',
            'class': 'config.logging_handlers.DailyRotatingFileHandler',
            'filename': os.path.join(LOGS_DIR, 'api'),
            'formatter': 'verbose',
            'when': 'midnight', # 毎日真夜中にローテーション
            'backupCount': 30,  # 30日分のバックアップを保持
        },
        'processing_file': {
            'level': 'INFO',
            'class': 'config.logging_handlers.DailyRotatingFileHandler',
            'filename': os.path.join(LOGS_DIR, 'processing'),
            'formatter': 'verbose',
            'when': 'midnight', # 毎日真夜中にローテーション
            'backupCount': 30,  # 30日分のバックアップを保持
        },
    },
    'loggers': {
        'django': {
            'handlers': ['django_file'],
            'level': 'INFO',
            'propagate': True,
        },
        'processing': {
            'handlers': ['processing_file'],
            'level': 'INFO',
            'propagate': True,
        },
        'api': {
            'handlers': ['api_file'],
            'level': 'DEBUG',
            'propagate': True,
        },
    },
}
# ------------------------------------------------------------------------------------------------

# Stripeの設定
STRIPE_PUBLISHABLE_KEY = config('STRIPE_PUBLISHABLE_KEY', default='')
STRIPE_SECRET_KEY = config('STRIPE_SECRET_KEY', default='')
STRIPE_WEBHOOK_SECRET = config('STRIPE_WEBHOOK_SECRET', default='')

# セキュリティヘッダーの設定
SECURE_CONTENT_TYPE_NOSNIFF = True  # X-Content-Type-Options: nosniff
X_FRAME_OPTIONS = 'DENY'            # X-Frame-Options: DENY
SECURE_BROWSER_XSS_FILTER = True    # X-XSS-Protection: 1; mode=block

# ファイルアップロードの設定
DATA_UPLOAD_MAX_MEMORY_SIZE = 1073741824  # 1GB
FILE_UPLOAD_MAX_MEMORY_SIZE = 1073741824  # 1GB

# システムメモリ設定（HLS生成用）
SYSTEM_MEMORY_GB = 8  # 12GB環境（実使用可能メモリを考慮）
